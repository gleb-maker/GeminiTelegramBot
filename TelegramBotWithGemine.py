import telebot
import requests
import json
import re

#  Your telegram api key
TELEGRAM_TOKEN = '#####################'

# Your Gemini api key (from Google AI Studio)
GEMINI_API_KEY = '#####################'

# URL For model
GEMINI_API_URL = '###################'

bot = telebot.TeleBot(TELEGRAM_TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ *Google Gemini 2.0 Flash*.\n"
        "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ üí¨",
        parse_mode='Markdown'
    )


# üî∏ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_query = message.text.strip()

    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY
    }

    data = {
        "contents": [
            {"parts": [{"text": user_query}]}
        ]
    }

    try:
        # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        response = requests.post(GEMINI_API_URL, headers=headers, data=json.dumps(data))
        response.raise_for_status()

        response_json = response.json()
        ai_response = response_json["candidates"][0]["content"]["parts"][0]["text"].strip()

        # üîπ –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        max_length = 3500
        response_text = f"üí° *–û—Ç–≤–µ—Ç –æ—Ç Gemini:*\n\n{ai_response}"

        # üîπ –ê–≤—Ç–æ-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
        code_keywords = ["def ", "class ", "import ", "print(", "{", "}", ";", "#include", "public ", "private "]
        if any(k in ai_response for k in code_keywords) and "```" not in ai_response:
            ai_response = f"```python\n{ai_response}\n```"

        # üîπ –û—á–∏—Å—Ç–∫–∞ Markdown-—Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã Telegram –Ω–µ –ª–æ–º–∞–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        ai_response = re.sub(r'[_*`]', r'', ai_response)

        # üîπ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å—Ç–∏–ª–µ–º
        text = f"üí° *–û—Ç–≤–µ—Ç –æ—Ç Gemini:*\n\n{ai_response}"

        for i in range(0, len(response_text), max_length):
            part = response_text[i:i + max_length]
            bot.send_message(message.chat.id, part, parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(
            message,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞."
        )


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—Ä–æ—Å)
bot.polling(none_stop=True)